{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3404,"sourceType":"datasetVersion","datasetId":1985}],"dockerImageVersionId":30786,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dennismathewjose/customer-segmentation-using-rfm-analysis?scriptVersionId=208636467\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:06.591061Z","iopub.execute_input":"2024-11-20T14:11:06.591579Z","iopub.status.idle":"2024-11-20T14:11:06.604583Z","shell.execute_reply.started":"2024-11-20T14:11:06.591522Z","shell.execute_reply":"2024-11-20T14:11:06.602879Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/ecommerce-data/data.csv\n","output_type":"stream"}],"execution_count":49},{"cell_type":"markdown","source":"## Data Preprocessing","metadata":{}},{"cell_type":"code","source":"filepath = '/kaggle/input/ecommerce-data/data.csv'\ndata = pd.read_csv(filepath, encoding = 'ISO-8859-1')\ncopy_data = data.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:06.606268Z","iopub.execute_input":"2024-11-20T14:11:06.606616Z","iopub.status.idle":"2024-11-20T14:11:07.566089Z","shell.execute_reply.started":"2024-11-20T14:11:06.606585Z","shell.execute_reply":"2024-11-20T14:11:07.564452Z"}},"outputs":[],"execution_count":50},{"cell_type":"code","source":"data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:07.568234Z","iopub.execute_input":"2024-11-20T14:11:07.568816Z","iopub.status.idle":"2024-11-20T14:11:07.585153Z","shell.execute_reply.started":"2024-11-20T14:11:07.568739Z","shell.execute_reply":"2024-11-20T14:11:07.58373Z"}},"outputs":[{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"  InvoiceNo StockCode                          Description  Quantity  \\\n0    536365    85123A   WHITE HANGING HEART T-LIGHT HOLDER         6   \n1    536365     71053                  WHITE METAL LANTERN         6   \n2    536365    84406B       CREAM CUPID HEARTS COAT HANGER         8   \n3    536365    84029G  KNITTED UNION FLAG HOT WATER BOTTLE         6   \n4    536365    84029E       RED WOOLLY HOTTIE WHITE HEART.         6   \n\n      InvoiceDate  UnitPrice  CustomerID         Country  \n0  12/1/2010 8:26       2.55     17850.0  United Kingdom  \n1  12/1/2010 8:26       3.39     17850.0  United Kingdom  \n2  12/1/2010 8:26       2.75     17850.0  United Kingdom  \n3  12/1/2010 8:26       3.39     17850.0  United Kingdom  \n4  12/1/2010 8:26       3.39     17850.0  United Kingdom  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>InvoiceNo</th>\n      <th>StockCode</th>\n      <th>Description</th>\n      <th>Quantity</th>\n      <th>InvoiceDate</th>\n      <th>UnitPrice</th>\n      <th>CustomerID</th>\n      <th>Country</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>536365</td>\n      <td>85123A</td>\n      <td>WHITE HANGING HEART T-LIGHT HOLDER</td>\n      <td>6</td>\n      <td>12/1/2010 8:26</td>\n      <td>2.55</td>\n      <td>17850.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>536365</td>\n      <td>71053</td>\n      <td>WHITE METAL LANTERN</td>\n      <td>6</td>\n      <td>12/1/2010 8:26</td>\n      <td>3.39</td>\n      <td>17850.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>536365</td>\n      <td>84406B</td>\n      <td>CREAM CUPID HEARTS COAT HANGER</td>\n      <td>8</td>\n      <td>12/1/2010 8:26</td>\n      <td>2.75</td>\n      <td>17850.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>536365</td>\n      <td>84029G</td>\n      <td>KNITTED UNION FLAG HOT WATER BOTTLE</td>\n      <td>6</td>\n      <td>12/1/2010 8:26</td>\n      <td>3.39</td>\n      <td>17850.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>536365</td>\n      <td>84029E</td>\n      <td>RED WOOLLY HOTTIE WHITE HEART.</td>\n      <td>6</td>\n      <td>12/1/2010 8:26</td>\n      <td>3.39</td>\n      <td>17850.0</td>\n      <td>United Kingdom</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":51},{"cell_type":"code","source":"data.tail()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:07.586804Z","iopub.execute_input":"2024-11-20T14:11:07.58737Z","iopub.status.idle":"2024-11-20T14:11:07.607751Z","shell.execute_reply.started":"2024-11-20T14:11:07.587322Z","shell.execute_reply":"2024-11-20T14:11:07.60614Z"}},"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"       InvoiceNo StockCode                      Description  Quantity  \\\n541904    581587     22613      PACK OF 20 SPACEBOY NAPKINS        12   \n541905    581587     22899     CHILDREN'S APRON DOLLY GIRL          6   \n541906    581587     23254    CHILDRENS CUTLERY DOLLY GIRL          4   \n541907    581587     23255  CHILDRENS CUTLERY CIRCUS PARADE         4   \n541908    581587     22138    BAKING SET 9 PIECE RETROSPOT          3   \n\n            InvoiceDate  UnitPrice  CustomerID Country  \n541904  12/9/2011 12:50       0.85     12680.0  France  \n541905  12/9/2011 12:50       2.10     12680.0  France  \n541906  12/9/2011 12:50       4.15     12680.0  France  \n541907  12/9/2011 12:50       4.15     12680.0  France  \n541908  12/9/2011 12:50       4.95     12680.0  France  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>InvoiceNo</th>\n      <th>StockCode</th>\n      <th>Description</th>\n      <th>Quantity</th>\n      <th>InvoiceDate</th>\n      <th>UnitPrice</th>\n      <th>CustomerID</th>\n      <th>Country</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>541904</th>\n      <td>581587</td>\n      <td>22613</td>\n      <td>PACK OF 20 SPACEBOY NAPKINS</td>\n      <td>12</td>\n      <td>12/9/2011 12:50</td>\n      <td>0.85</td>\n      <td>12680.0</td>\n      <td>France</td>\n    </tr>\n    <tr>\n      <th>541905</th>\n      <td>581587</td>\n      <td>22899</td>\n      <td>CHILDREN'S APRON DOLLY GIRL</td>\n      <td>6</td>\n      <td>12/9/2011 12:50</td>\n      <td>2.10</td>\n      <td>12680.0</td>\n      <td>France</td>\n    </tr>\n    <tr>\n      <th>541906</th>\n      <td>581587</td>\n      <td>23254</td>\n      <td>CHILDRENS CUTLERY DOLLY GIRL</td>\n      <td>4</td>\n      <td>12/9/2011 12:50</td>\n      <td>4.15</td>\n      <td>12680.0</td>\n      <td>France</td>\n    </tr>\n    <tr>\n      <th>541907</th>\n      <td>581587</td>\n      <td>23255</td>\n      <td>CHILDRENS CUTLERY CIRCUS PARADE</td>\n      <td>4</td>\n      <td>12/9/2011 12:50</td>\n      <td>4.15</td>\n      <td>12680.0</td>\n      <td>France</td>\n    </tr>\n    <tr>\n      <th>541908</th>\n      <td>581587</td>\n      <td>22138</td>\n      <td>BAKING SET 9 PIECE RETROSPOT</td>\n      <td>3</td>\n      <td>12/9/2011 12:50</td>\n      <td>4.95</td>\n      <td>12680.0</td>\n      <td>France</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":52},{"cell_type":"code","source":"data.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:07.609804Z","iopub.execute_input":"2024-11-20T14:11:07.6112Z","iopub.status.idle":"2024-11-20T14:11:07.763292Z","shell.execute_reply.started":"2024-11-20T14:11:07.611134Z","shell.execute_reply":"2024-11-20T14:11:07.761938Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 541909 entries, 0 to 541908\nData columns (total 8 columns):\n #   Column       Non-Null Count   Dtype  \n---  ------       --------------   -----  \n 0   InvoiceNo    541909 non-null  object \n 1   StockCode    541909 non-null  object \n 2   Description  540455 non-null  object \n 3   Quantity     541909 non-null  int64  \n 4   InvoiceDate  541909 non-null  object \n 5   UnitPrice    541909 non-null  float64\n 6   CustomerID   406829 non-null  float64\n 7   Country      541909 non-null  object \ndtypes: float64(2), int64(1), object(5)\nmemory usage: 33.1+ MB\n","output_type":"stream"}],"execution_count":53},{"cell_type":"code","source":"data.describe().T","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:07.764982Z","iopub.execute_input":"2024-11-20T14:11:07.765452Z","iopub.status.idle":"2024-11-20T14:11:07.865773Z","shell.execute_reply.started":"2024-11-20T14:11:07.765412Z","shell.execute_reply":"2024-11-20T14:11:07.864462Z"}},"outputs":[{"execution_count":54,"output_type":"execute_result","data":{"text/plain":"               count          mean          std       min       25%       50%  \\\nQuantity    541909.0      9.552250   218.081158 -80995.00      1.00      3.00   \nUnitPrice   541909.0      4.611114    96.759853 -11062.06      1.25      2.08   \nCustomerID  406829.0  15287.690570  1713.600303  12346.00  13953.00  15152.00   \n\n                 75%      max  \nQuantity       10.00  80995.0  \nUnitPrice       4.13  38970.0  \nCustomerID  16791.00  18287.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Quantity</th>\n      <td>541909.0</td>\n      <td>9.552250</td>\n      <td>218.081158</td>\n      <td>-80995.00</td>\n      <td>1.00</td>\n      <td>3.00</td>\n      <td>10.00</td>\n      <td>80995.0</td>\n    </tr>\n    <tr>\n      <th>UnitPrice</th>\n      <td>541909.0</td>\n      <td>4.611114</td>\n      <td>96.759853</td>\n      <td>-11062.06</td>\n      <td>1.25</td>\n      <td>2.08</td>\n      <td>4.13</td>\n      <td>38970.0</td>\n    </tr>\n    <tr>\n      <th>CustomerID</th>\n      <td>406829.0</td>\n      <td>15287.690570</td>\n      <td>1713.600303</td>\n      <td>12346.00</td>\n      <td>13953.00</td>\n      <td>15152.00</td>\n      <td>16791.00</td>\n      <td>18287.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":54},{"cell_type":"code","source":"data.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:07.867509Z","iopub.execute_input":"2024-11-20T14:11:07.86807Z","iopub.status.idle":"2024-11-20T14:11:08.01029Z","shell.execute_reply.started":"2024-11-20T14:11:07.867998Z","shell.execute_reply":"2024-11-20T14:11:08.008761Z"}},"outputs":[{"execution_count":55,"output_type":"execute_result","data":{"text/plain":"InvoiceNo           0\nStockCode           0\nDescription      1454\nQuantity            0\nInvoiceDate         0\nUnitPrice           0\nCustomerID     135080\nCountry             0\ndtype: int64"},"metadata":{}}],"execution_count":55},{"cell_type":"code","source":"### Converting the Date Column to Date Type\ndata['InvoiceDate'] = pd.to_datetime(data['InvoiceDate'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:08.01179Z","iopub.execute_input":"2024-11-20T14:11:08.012198Z","iopub.status.idle":"2024-11-20T14:11:08.165006Z","shell.execute_reply.started":"2024-11-20T14:11:08.012161Z","shell.execute_reply":"2024-11-20T14:11:08.163789Z"}},"outputs":[],"execution_count":56},{"cell_type":"code","source":"data.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:08.166604Z","iopub.execute_input":"2024-11-20T14:11:08.166995Z","iopub.status.idle":"2024-11-20T14:11:08.284435Z","shell.execute_reply.started":"2024-11-20T14:11:08.166959Z","shell.execute_reply":"2024-11-20T14:11:08.282968Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 541909 entries, 0 to 541908\nData columns (total 8 columns):\n #   Column       Non-Null Count   Dtype         \n---  ------       --------------   -----         \n 0   InvoiceNo    541909 non-null  object        \n 1   StockCode    541909 non-null  object        \n 2   Description  540455 non-null  object        \n 3   Quantity     541909 non-null  int64         \n 4   InvoiceDate  541909 non-null  datetime64[ns]\n 5   UnitPrice    541909 non-null  float64       \n 6   CustomerID   406829 non-null  float64       \n 7   Country      541909 non-null  object        \ndtypes: datetime64[ns](1), float64(2), int64(1), object(4)\nmemory usage: 33.1+ MB\n","output_type":"stream"}],"execution_count":57},{"cell_type":"code","source":"#Handling the missing values and negative values appropriately\ndata.loc[data['UnitPrice'] < 0]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:08.286134Z","iopub.execute_input":"2024-11-20T14:11:08.286548Z","iopub.status.idle":"2024-11-20T14:11:08.304889Z","shell.execute_reply.started":"2024-11-20T14:11:08.286509Z","shell.execute_reply":"2024-11-20T14:11:08.303467Z"}},"outputs":[{"execution_count":58,"output_type":"execute_result","data":{"text/plain":"       InvoiceNo StockCode      Description  Quantity         InvoiceDate  \\\n299983   A563186         B  Adjust bad debt         1 2011-08-12 14:51:00   \n299984   A563187         B  Adjust bad debt         1 2011-08-12 14:52:00   \n\n        UnitPrice  CustomerID         Country  \n299983  -11062.06         NaN  United Kingdom  \n299984  -11062.06         NaN  United Kingdom  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>InvoiceNo</th>\n      <th>StockCode</th>\n      <th>Description</th>\n      <th>Quantity</th>\n      <th>InvoiceDate</th>\n      <th>UnitPrice</th>\n      <th>CustomerID</th>\n      <th>Country</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>299983</th>\n      <td>A563186</td>\n      <td>B</td>\n      <td>Adjust bad debt</td>\n      <td>1</td>\n      <td>2011-08-12 14:51:00</td>\n      <td>-11062.06</td>\n      <td>NaN</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>299984</th>\n      <td>A563187</td>\n      <td>B</td>\n      <td>Adjust bad debt</td>\n      <td>1</td>\n      <td>2011-08-12 14:52:00</td>\n      <td>-11062.06</td>\n      <td>NaN</td>\n      <td>United Kingdom</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":58},{"cell_type":"code","source":"data.loc[data['Quantity']  < 0]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:08.30665Z","iopub.execute_input":"2024-11-20T14:11:08.307189Z","iopub.status.idle":"2024-11-20T14:11:08.331086Z","shell.execute_reply.started":"2024-11-20T14:11:08.307148Z","shell.execute_reply":"2024-11-20T14:11:08.329894Z"}},"outputs":[{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"       InvoiceNo StockCode                       Description  Quantity  \\\n141      C536379         D                          Discount        -1   \n154      C536383    35004C   SET OF 3 COLOURED  FLYING DUCKS        -1   \n235      C536391     22556    PLASTERS IN TIN CIRCUS PARADE        -12   \n236      C536391     21984  PACK OF 12 PINK PAISLEY TISSUES        -24   \n237      C536391     21983  PACK OF 12 BLUE PAISLEY TISSUES        -24   \n...          ...       ...                               ...       ...   \n540449   C581490     23144   ZINC T-LIGHT HOLDER STARS SMALL       -11   \n541541   C581499         M                            Manual        -1   \n541715   C581568     21258        VICTORIAN SEWING BOX LARGE        -5   \n541716   C581569     84978  HANGING HEART JAR T-LIGHT HOLDER        -1   \n541717   C581569     20979     36 PENCILS TUBE RED RETROSPOT        -5   \n\n               InvoiceDate  UnitPrice  CustomerID         Country  \n141    2010-12-01 09:41:00      27.50     14527.0  United Kingdom  \n154    2010-12-01 09:49:00       4.65     15311.0  United Kingdom  \n235    2010-12-01 10:24:00       1.65     17548.0  United Kingdom  \n236    2010-12-01 10:24:00       0.29     17548.0  United Kingdom  \n237    2010-12-01 10:24:00       0.29     17548.0  United Kingdom  \n...                    ...        ...         ...             ...  \n540449 2011-12-09 09:57:00       0.83     14397.0  United Kingdom  \n541541 2011-12-09 10:28:00     224.69     15498.0  United Kingdom  \n541715 2011-12-09 11:57:00      10.95     15311.0  United Kingdom  \n541716 2011-12-09 11:58:00       1.25     17315.0  United Kingdom  \n541717 2011-12-09 11:58:00       1.25     17315.0  United Kingdom  \n\n[10624 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>InvoiceNo</th>\n      <th>StockCode</th>\n      <th>Description</th>\n      <th>Quantity</th>\n      <th>InvoiceDate</th>\n      <th>UnitPrice</th>\n      <th>CustomerID</th>\n      <th>Country</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>141</th>\n      <td>C536379</td>\n      <td>D</td>\n      <td>Discount</td>\n      <td>-1</td>\n      <td>2010-12-01 09:41:00</td>\n      <td>27.50</td>\n      <td>14527.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>154</th>\n      <td>C536383</td>\n      <td>35004C</td>\n      <td>SET OF 3 COLOURED  FLYING DUCKS</td>\n      <td>-1</td>\n      <td>2010-12-01 09:49:00</td>\n      <td>4.65</td>\n      <td>15311.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>235</th>\n      <td>C536391</td>\n      <td>22556</td>\n      <td>PLASTERS IN TIN CIRCUS PARADE</td>\n      <td>-12</td>\n      <td>2010-12-01 10:24:00</td>\n      <td>1.65</td>\n      <td>17548.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>236</th>\n      <td>C536391</td>\n      <td>21984</td>\n      <td>PACK OF 12 PINK PAISLEY TISSUES</td>\n      <td>-24</td>\n      <td>2010-12-01 10:24:00</td>\n      <td>0.29</td>\n      <td>17548.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>237</th>\n      <td>C536391</td>\n      <td>21983</td>\n      <td>PACK OF 12 BLUE PAISLEY TISSUES</td>\n      <td>-24</td>\n      <td>2010-12-01 10:24:00</td>\n      <td>0.29</td>\n      <td>17548.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>540449</th>\n      <td>C581490</td>\n      <td>23144</td>\n      <td>ZINC T-LIGHT HOLDER STARS SMALL</td>\n      <td>-11</td>\n      <td>2011-12-09 09:57:00</td>\n      <td>0.83</td>\n      <td>14397.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>541541</th>\n      <td>C581499</td>\n      <td>M</td>\n      <td>Manual</td>\n      <td>-1</td>\n      <td>2011-12-09 10:28:00</td>\n      <td>224.69</td>\n      <td>15498.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>541715</th>\n      <td>C581568</td>\n      <td>21258</td>\n      <td>VICTORIAN SEWING BOX LARGE</td>\n      <td>-5</td>\n      <td>2011-12-09 11:57:00</td>\n      <td>10.95</td>\n      <td>15311.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>541716</th>\n      <td>C581569</td>\n      <td>84978</td>\n      <td>HANGING HEART JAR T-LIGHT HOLDER</td>\n      <td>-1</td>\n      <td>2011-12-09 11:58:00</td>\n      <td>1.25</td>\n      <td>17315.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>541717</th>\n      <td>C581569</td>\n      <td>20979</td>\n      <td>36 PENCILS TUBE RED RETROSPOT</td>\n      <td>-5</td>\n      <td>2011-12-09 11:58:00</td>\n      <td>1.25</td>\n      <td>17315.0</td>\n      <td>United Kingdom</td>\n    </tr>\n  </tbody>\n</table>\n<p>10624 rows × 8 columns</p>\n</div>"},"metadata":{}}],"execution_count":59},{"cell_type":"code","source":"cleaned_data = data.dropna(subset = ['CustomerID'])\ncleaned_data.loc[data['UnitPrice'] < 0]\ncleaned_data.loc[cleaned_data['Quantity']  < 0]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:08.332717Z","iopub.execute_input":"2024-11-20T14:11:08.334337Z","iopub.status.idle":"2024-11-20T14:11:08.401544Z","shell.execute_reply.started":"2024-11-20T14:11:08.334277Z","shell.execute_reply":"2024-11-20T14:11:08.400196Z"}},"outputs":[{"execution_count":60,"output_type":"execute_result","data":{"text/plain":"       InvoiceNo StockCode                       Description  Quantity  \\\n141      C536379         D                          Discount        -1   \n154      C536383    35004C   SET OF 3 COLOURED  FLYING DUCKS        -1   \n235      C536391     22556    PLASTERS IN TIN CIRCUS PARADE        -12   \n236      C536391     21984  PACK OF 12 PINK PAISLEY TISSUES        -24   \n237      C536391     21983  PACK OF 12 BLUE PAISLEY TISSUES        -24   \n...          ...       ...                               ...       ...   \n540449   C581490     23144   ZINC T-LIGHT HOLDER STARS SMALL       -11   \n541541   C581499         M                            Manual        -1   \n541715   C581568     21258        VICTORIAN SEWING BOX LARGE        -5   \n541716   C581569     84978  HANGING HEART JAR T-LIGHT HOLDER        -1   \n541717   C581569     20979     36 PENCILS TUBE RED RETROSPOT        -5   \n\n               InvoiceDate  UnitPrice  CustomerID         Country  \n141    2010-12-01 09:41:00      27.50     14527.0  United Kingdom  \n154    2010-12-01 09:49:00       4.65     15311.0  United Kingdom  \n235    2010-12-01 10:24:00       1.65     17548.0  United Kingdom  \n236    2010-12-01 10:24:00       0.29     17548.0  United Kingdom  \n237    2010-12-01 10:24:00       0.29     17548.0  United Kingdom  \n...                    ...        ...         ...             ...  \n540449 2011-12-09 09:57:00       0.83     14397.0  United Kingdom  \n541541 2011-12-09 10:28:00     224.69     15498.0  United Kingdom  \n541715 2011-12-09 11:57:00      10.95     15311.0  United Kingdom  \n541716 2011-12-09 11:58:00       1.25     17315.0  United Kingdom  \n541717 2011-12-09 11:58:00       1.25     17315.0  United Kingdom  \n\n[8905 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>InvoiceNo</th>\n      <th>StockCode</th>\n      <th>Description</th>\n      <th>Quantity</th>\n      <th>InvoiceDate</th>\n      <th>UnitPrice</th>\n      <th>CustomerID</th>\n      <th>Country</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>141</th>\n      <td>C536379</td>\n      <td>D</td>\n      <td>Discount</td>\n      <td>-1</td>\n      <td>2010-12-01 09:41:00</td>\n      <td>27.50</td>\n      <td>14527.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>154</th>\n      <td>C536383</td>\n      <td>35004C</td>\n      <td>SET OF 3 COLOURED  FLYING DUCKS</td>\n      <td>-1</td>\n      <td>2010-12-01 09:49:00</td>\n      <td>4.65</td>\n      <td>15311.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>235</th>\n      <td>C536391</td>\n      <td>22556</td>\n      <td>PLASTERS IN TIN CIRCUS PARADE</td>\n      <td>-12</td>\n      <td>2010-12-01 10:24:00</td>\n      <td>1.65</td>\n      <td>17548.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>236</th>\n      <td>C536391</td>\n      <td>21984</td>\n      <td>PACK OF 12 PINK PAISLEY TISSUES</td>\n      <td>-24</td>\n      <td>2010-12-01 10:24:00</td>\n      <td>0.29</td>\n      <td>17548.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>237</th>\n      <td>C536391</td>\n      <td>21983</td>\n      <td>PACK OF 12 BLUE PAISLEY TISSUES</td>\n      <td>-24</td>\n      <td>2010-12-01 10:24:00</td>\n      <td>0.29</td>\n      <td>17548.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>540449</th>\n      <td>C581490</td>\n      <td>23144</td>\n      <td>ZINC T-LIGHT HOLDER STARS SMALL</td>\n      <td>-11</td>\n      <td>2011-12-09 09:57:00</td>\n      <td>0.83</td>\n      <td>14397.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>541541</th>\n      <td>C581499</td>\n      <td>M</td>\n      <td>Manual</td>\n      <td>-1</td>\n      <td>2011-12-09 10:28:00</td>\n      <td>224.69</td>\n      <td>15498.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>541715</th>\n      <td>C581568</td>\n      <td>21258</td>\n      <td>VICTORIAN SEWING BOX LARGE</td>\n      <td>-5</td>\n      <td>2011-12-09 11:57:00</td>\n      <td>10.95</td>\n      <td>15311.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>541716</th>\n      <td>C581569</td>\n      <td>84978</td>\n      <td>HANGING HEART JAR T-LIGHT HOLDER</td>\n      <td>-1</td>\n      <td>2011-12-09 11:58:00</td>\n      <td>1.25</td>\n      <td>17315.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>541717</th>\n      <td>C581569</td>\n      <td>20979</td>\n      <td>36 PENCILS TUBE RED RETROSPOT</td>\n      <td>-5</td>\n      <td>2011-12-09 11:58:00</td>\n      <td>1.25</td>\n      <td>17315.0</td>\n      <td>United Kingdom</td>\n    </tr>\n  </tbody>\n</table>\n<p>8905 rows × 8 columns</p>\n</div>"},"metadata":{}}],"execution_count":60},{"cell_type":"code","source":"cleaned_data.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:08.403277Z","iopub.execute_input":"2024-11-20T14:11:08.403756Z","iopub.status.idle":"2024-11-20T14:11:08.49298Z","shell.execute_reply.started":"2024-11-20T14:11:08.403717Z","shell.execute_reply":"2024-11-20T14:11:08.491442Z"}},"outputs":[{"execution_count":61,"output_type":"execute_result","data":{"text/plain":"InvoiceNo      0\nStockCode      0\nDescription    0\nQuantity       0\nInvoiceDate    0\nUnitPrice      0\nCustomerID     0\nCountry        0\ndtype: int64"},"metadata":{}}],"execution_count":61},{"cell_type":"code","source":"cleaned_data.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:08.494619Z","iopub.execute_input":"2024-11-20T14:11:08.495121Z","iopub.status.idle":"2024-11-20T14:11:08.592935Z","shell.execute_reply.started":"2024-11-20T14:11:08.495071Z","shell.execute_reply":"2024-11-20T14:11:08.591251Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 406829 entries, 0 to 541908\nData columns (total 8 columns):\n #   Column       Non-Null Count   Dtype         \n---  ------       --------------   -----         \n 0   InvoiceNo    406829 non-null  object        \n 1   StockCode    406829 non-null  object        \n 2   Description  406829 non-null  object        \n 3   Quantity     406829 non-null  int64         \n 4   InvoiceDate  406829 non-null  datetime64[ns]\n 5   UnitPrice    406829 non-null  float64       \n 6   CustomerID   406829 non-null  float64       \n 7   Country      406829 non-null  object        \ndtypes: datetime64[ns](1), float64(2), int64(1), object(4)\nmemory usage: 27.9+ MB\n","output_type":"stream"}],"execution_count":62},{"cell_type":"code","source":"cleaned_data.loc[cleaned_data['Quantity']  < 0]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:08.594775Z","iopub.execute_input":"2024-11-20T14:11:08.595305Z","iopub.status.idle":"2024-11-20T14:11:08.619751Z","shell.execute_reply.started":"2024-11-20T14:11:08.595265Z","shell.execute_reply":"2024-11-20T14:11:08.618391Z"}},"outputs":[{"execution_count":63,"output_type":"execute_result","data":{"text/plain":"       InvoiceNo StockCode                       Description  Quantity  \\\n141      C536379         D                          Discount        -1   \n154      C536383    35004C   SET OF 3 COLOURED  FLYING DUCKS        -1   \n235      C536391     22556    PLASTERS IN TIN CIRCUS PARADE        -12   \n236      C536391     21984  PACK OF 12 PINK PAISLEY TISSUES        -24   \n237      C536391     21983  PACK OF 12 BLUE PAISLEY TISSUES        -24   \n...          ...       ...                               ...       ...   \n540449   C581490     23144   ZINC T-LIGHT HOLDER STARS SMALL       -11   \n541541   C581499         M                            Manual        -1   \n541715   C581568     21258        VICTORIAN SEWING BOX LARGE        -5   \n541716   C581569     84978  HANGING HEART JAR T-LIGHT HOLDER        -1   \n541717   C581569     20979     36 PENCILS TUBE RED RETROSPOT        -5   \n\n               InvoiceDate  UnitPrice  CustomerID         Country  \n141    2010-12-01 09:41:00      27.50     14527.0  United Kingdom  \n154    2010-12-01 09:49:00       4.65     15311.0  United Kingdom  \n235    2010-12-01 10:24:00       1.65     17548.0  United Kingdom  \n236    2010-12-01 10:24:00       0.29     17548.0  United Kingdom  \n237    2010-12-01 10:24:00       0.29     17548.0  United Kingdom  \n...                    ...        ...         ...             ...  \n540449 2011-12-09 09:57:00       0.83     14397.0  United Kingdom  \n541541 2011-12-09 10:28:00     224.69     15498.0  United Kingdom  \n541715 2011-12-09 11:57:00      10.95     15311.0  United Kingdom  \n541716 2011-12-09 11:58:00       1.25     17315.0  United Kingdom  \n541717 2011-12-09 11:58:00       1.25     17315.0  United Kingdom  \n\n[8905 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>InvoiceNo</th>\n      <th>StockCode</th>\n      <th>Description</th>\n      <th>Quantity</th>\n      <th>InvoiceDate</th>\n      <th>UnitPrice</th>\n      <th>CustomerID</th>\n      <th>Country</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>141</th>\n      <td>C536379</td>\n      <td>D</td>\n      <td>Discount</td>\n      <td>-1</td>\n      <td>2010-12-01 09:41:00</td>\n      <td>27.50</td>\n      <td>14527.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>154</th>\n      <td>C536383</td>\n      <td>35004C</td>\n      <td>SET OF 3 COLOURED  FLYING DUCKS</td>\n      <td>-1</td>\n      <td>2010-12-01 09:49:00</td>\n      <td>4.65</td>\n      <td>15311.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>235</th>\n      <td>C536391</td>\n      <td>22556</td>\n      <td>PLASTERS IN TIN CIRCUS PARADE</td>\n      <td>-12</td>\n      <td>2010-12-01 10:24:00</td>\n      <td>1.65</td>\n      <td>17548.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>236</th>\n      <td>C536391</td>\n      <td>21984</td>\n      <td>PACK OF 12 PINK PAISLEY TISSUES</td>\n      <td>-24</td>\n      <td>2010-12-01 10:24:00</td>\n      <td>0.29</td>\n      <td>17548.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>237</th>\n      <td>C536391</td>\n      <td>21983</td>\n      <td>PACK OF 12 BLUE PAISLEY TISSUES</td>\n      <td>-24</td>\n      <td>2010-12-01 10:24:00</td>\n      <td>0.29</td>\n      <td>17548.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>540449</th>\n      <td>C581490</td>\n      <td>23144</td>\n      <td>ZINC T-LIGHT HOLDER STARS SMALL</td>\n      <td>-11</td>\n      <td>2011-12-09 09:57:00</td>\n      <td>0.83</td>\n      <td>14397.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>541541</th>\n      <td>C581499</td>\n      <td>M</td>\n      <td>Manual</td>\n      <td>-1</td>\n      <td>2011-12-09 10:28:00</td>\n      <td>224.69</td>\n      <td>15498.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>541715</th>\n      <td>C581568</td>\n      <td>21258</td>\n      <td>VICTORIAN SEWING BOX LARGE</td>\n      <td>-5</td>\n      <td>2011-12-09 11:57:00</td>\n      <td>10.95</td>\n      <td>15311.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>541716</th>\n      <td>C581569</td>\n      <td>84978</td>\n      <td>HANGING HEART JAR T-LIGHT HOLDER</td>\n      <td>-1</td>\n      <td>2011-12-09 11:58:00</td>\n      <td>1.25</td>\n      <td>17315.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>541717</th>\n      <td>C581569</td>\n      <td>20979</td>\n      <td>36 PENCILS TUBE RED RETROSPOT</td>\n      <td>-5</td>\n      <td>2011-12-09 11:58:00</td>\n      <td>1.25</td>\n      <td>17315.0</td>\n      <td>United Kingdom</td>\n    </tr>\n  </tbody>\n</table>\n<p>8905 rows × 8 columns</p>\n</div>"},"metadata":{}}],"execution_count":63},{"cell_type":"code","source":"cleaned_data.describe().T","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:08.621475Z","iopub.execute_input":"2024-11-20T14:11:08.621887Z","iopub.status.idle":"2024-11-20T14:11:08.713327Z","shell.execute_reply.started":"2024-11-20T14:11:08.621851Z","shell.execute_reply":"2024-11-20T14:11:08.711973Z"}},"outputs":[{"execution_count":64,"output_type":"execute_result","data":{"text/plain":"                count                           mean                  min  \\\nQuantity     406829.0                      12.061303             -80995.0   \nInvoiceDate    406829  2011-07-10 16:30:57.879207424  2010-12-01 08:26:00   \nUnitPrice    406829.0                       3.460471                  0.0   \nCustomerID   406829.0                    15287.69057              12346.0   \n\n                             25%                  50%                  75%  \\\nQuantity                     2.0                  5.0                 12.0   \nInvoiceDate  2011-04-06 15:02:00  2011-07-31 11:48:00  2011-10-20 13:06:00   \nUnitPrice                   1.25                 1.95                 3.75   \nCustomerID               13953.0              15152.0              16791.0   \n\n                             max          std  \nQuantity                 80995.0    248.69337  \nInvoiceDate  2011-12-09 12:50:00          NaN  \nUnitPrice                38970.0    69.315162  \nCustomerID               18287.0  1713.600303  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n      <th>std</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Quantity</th>\n      <td>406829.0</td>\n      <td>12.061303</td>\n      <td>-80995.0</td>\n      <td>2.0</td>\n      <td>5.0</td>\n      <td>12.0</td>\n      <td>80995.0</td>\n      <td>248.69337</td>\n    </tr>\n    <tr>\n      <th>InvoiceDate</th>\n      <td>406829</td>\n      <td>2011-07-10 16:30:57.879207424</td>\n      <td>2010-12-01 08:26:00</td>\n      <td>2011-04-06 15:02:00</td>\n      <td>2011-07-31 11:48:00</td>\n      <td>2011-10-20 13:06:00</td>\n      <td>2011-12-09 12:50:00</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>UnitPrice</th>\n      <td>406829.0</td>\n      <td>3.460471</td>\n      <td>0.0</td>\n      <td>1.25</td>\n      <td>1.95</td>\n      <td>3.75</td>\n      <td>38970.0</td>\n      <td>69.315162</td>\n    </tr>\n    <tr>\n      <th>CustomerID</th>\n      <td>406829.0</td>\n      <td>15287.69057</td>\n      <td>12346.0</td>\n      <td>13953.0</td>\n      <td>15152.0</td>\n      <td>16791.0</td>\n      <td>18287.0</td>\n      <td>1713.600303</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":64},{"cell_type":"markdown","source":"## Exploratory Data Visualization","metadata":{}},{"cell_type":"code","source":"unique_customers = cleaned_data['CustomerID'].nunique()\nprint(f\"There are {unique_customers} unique customers.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:08.71493Z","iopub.execute_input":"2024-11-20T14:11:08.715388Z","iopub.status.idle":"2024-11-20T14:11:08.728568Z","shell.execute_reply.started":"2024-11-20T14:11:08.71535Z","shell.execute_reply":"2024-11-20T14:11:08.727291Z"}},"outputs":[{"name":"stdout","text":"There are 4372 unique customers.\n","output_type":"stream"}],"execution_count":65},{"cell_type":"code","source":"import plotly.express as px\nimport plotly.io as pio\npio.renderers.default = 'iframe'\n\ncustomer_order_counts = cleaned_data.groupby('CustomerID')['InvoiceNo'].nunique()\nfig = px.histogram(customer_order_counts, nbins=30, title=\"Distribution of Orders per Customer\")\nfig.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:08.730883Z","iopub.execute_input":"2024-11-20T14:11:08.731297Z","iopub.status.idle":"2024-11-20T14:11:09.012767Z","shell.execute_reply.started":"2024-11-20T14:11:08.731263Z","shell.execute_reply":"2024-11-20T14:11:09.011468Z"}},"outputs":[{"output_type":"display_data","data":{"text/html":"<iframe\n    scrolling=\"no\"\n    width=\"100%\"\n    height=\"545px\"\n    src=\"iframe_figures/figure_66.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n"},"metadata":{}}],"execution_count":66},{"cell_type":"code","source":"top_customers = customer_order_counts.nlargest(5).reset_index()\nprint(top_customers)\n\nfig = px.bar(top_customers, x='CustomerID', y='InvoiceNo', title=\"Top 5 Customers by Order Count\")\nfig.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:09.014395Z","iopub.execute_input":"2024-11-20T14:11:09.014784Z","iopub.status.idle":"2024-11-20T14:11:09.098562Z","shell.execute_reply.started":"2024-11-20T14:11:09.014748Z","shell.execute_reply":"2024-11-20T14:11:09.097265Z"}},"outputs":[{"name":"stdout","text":"   CustomerID  InvoiceNo\n0     14911.0        248\n1     12748.0        224\n2     17841.0        169\n3     14606.0        128\n4     13089.0        118\n","output_type":"stream"},{"output_type":"display_data","data":{"text/html":"<iframe\n    scrolling=\"no\"\n    width=\"100%\"\n    height=\"545px\"\n    src=\"iframe_figures/figure_67.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n"},"metadata":{}}],"execution_count":67},{"cell_type":"code","source":"top_products = cleaned_data['Description'].value_counts().head(10).reset_index()\ntop_products.columns = ['Description', 'Count']\n\nfig = px.bar(top_products, x='Description', y='Count', title=\"Top 10 Most Frequently Purchased Products\")\nfig.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:09.099969Z","iopub.execute_input":"2024-11-20T14:11:09.100367Z","iopub.status.idle":"2024-11-20T14:11:09.223231Z","shell.execute_reply.started":"2024-11-20T14:11:09.100332Z","shell.execute_reply":"2024-11-20T14:11:09.221722Z"}},"outputs":[{"output_type":"display_data","data":{"text/html":"<iframe\n    scrolling=\"no\"\n    width=\"100%\"\n    height=\"545px\"\n    src=\"iframe_figures/figure_68.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n"},"metadata":{}}],"execution_count":68},{"cell_type":"code","source":"average_price = cleaned_data['UnitPrice'].mean()\nprint(f\"The average product price is {average_price:.2f}.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:09.224831Z","iopub.execute_input":"2024-11-20T14:11:09.225318Z","iopub.status.idle":"2024-11-20T14:11:09.234407Z","shell.execute_reply.started":"2024-11-20T14:11:09.225268Z","shell.execute_reply":"2024-11-20T14:11:09.232835Z"}},"outputs":[{"name":"stdout","text":"The average product price is 3.46.\n","output_type":"stream"}],"execution_count":69},{"cell_type":"code","source":"cleaned_data['Revenue'] = cleaned_data['Quantity'] * cleaned_data['UnitPrice']\nrevenue_per_product = cleaned_data.groupby('Description')['Revenue'].sum().reset_index()\ntop_revenue_product = revenue_per_product.nlargest(1, 'Revenue')\nprint(top_revenue_product)\n\nfig = px.bar(revenue_per_product.nlargest(10, 'Revenue'), x='Description', y='Revenue', title=\"Top Revenue-Generating Products\")\nfig.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:09.236392Z","iopub.execute_input":"2024-11-20T14:11:09.236821Z","iopub.status.idle":"2024-11-20T14:11:09.379896Z","shell.execute_reply.started":"2024-11-20T14:11:09.236781Z","shell.execute_reply":"2024-11-20T14:11:09.378525Z"}},"outputs":[{"name":"stdout","text":"                   Description   Revenue\n2780  REGENCY CAKESTAND 3 TIER  132870.4\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_84/3390906176.py:1: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/html":"<iframe\n    scrolling=\"no\"\n    width=\"100%\"\n    height=\"545px\"\n    src=\"iframe_figures/figure_70.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n"},"metadata":{}}],"execution_count":70},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"cleaned_data['InvoiceDate'] = pd.to_datetime(cleaned_data['InvoiceDate'])\ncleaned_data['DayOfWeek'] = cleaned_data['InvoiceDate'].dt.day_name()\nday_order_counts = cleaned_data['DayOfWeek'].value_counts()\n\nfig = px.bar(day_order_counts, x=day_order_counts.index, y=day_order_counts.values, title=\"Orders by Day of the Week\")\nfig.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:09.382046Z","iopub.execute_input":"2024-11-20T14:11:09.382569Z","iopub.status.idle":"2024-11-20T14:11:09.621898Z","shell.execute_reply.started":"2024-11-20T14:11:09.382518Z","shell.execute_reply":"2024-11-20T14:11:09.620656Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_84/3661181103.py:1: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n/tmp/ipykernel_84/3661181103.py:2: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/html":"<iframe\n    scrolling=\"no\"\n    width=\"100%\"\n    height=\"545px\"\n    src=\"iframe_figures/figure_71.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n"},"metadata":{}}],"execution_count":71},{"cell_type":"code","source":"cleaned_data['Month'] = cleaned_data['InvoiceDate'].dt.month\nmonth_order_counts = cleaned_data['Month'].value_counts().sort_index()\n\nfig = px.line(x=month_order_counts.index, y=month_order_counts.values, title=\"Orders by Month\")\nfig.update_xaxes(title=\"Month\")\nfig.update_yaxes(title=\"Order Count\")\nfig.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:09.623673Z","iopub.execute_input":"2024-11-20T14:11:09.623995Z","iopub.status.idle":"2024-11-20T14:11:09.710859Z","shell.execute_reply.started":"2024-11-20T14:11:09.623965Z","shell.execute_reply":"2024-11-20T14:11:09.709191Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_84/2975885121.py:1: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/html":"<iframe\n    scrolling=\"no\"\n    width=\"100%\"\n    height=\"545px\"\n    src=\"iframe_figures/figure_72.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n"},"metadata":{}}],"execution_count":72},{"cell_type":"code","source":"top_countries = cleaned_data['Country'].value_counts().head(5).reset_index()\ntop_countries.columns = ['Country', 'Count']\n\nfig = px.bar(top_countries, x='Country', y='Count', title=\"Top 5 Countries by Number of Orders\")\nfig.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:09.712614Z","iopub.execute_input":"2024-11-20T14:11:09.713074Z","iopub.status.idle":"2024-11-20T14:11:09.834957Z","shell.execute_reply.started":"2024-11-20T14:11:09.713005Z","shell.execute_reply":"2024-11-20T14:11:09.832214Z"}},"outputs":[{"output_type":"display_data","data":{"text/html":"<iframe\n    scrolling=\"no\"\n    width=\"100%\"\n    height=\"545px\"\n    src=\"iframe_figures/figure_73.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n"},"metadata":{}}],"execution_count":73},{"cell_type":"code","source":"average_order_value = cleaned_data.groupby('Country')['Revenue'].mean().reset_index()\n\nfig = px.bar(average_order_value, x='Country', y='Revenue', title=\"Average Order Value by Country\")\nfig.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:09.837149Z","iopub.execute_input":"2024-11-20T14:11:09.837724Z","iopub.status.idle":"2024-11-20T14:11:09.960225Z","shell.execute_reply.started":"2024-11-20T14:11:09.837667Z","shell.execute_reply":"2024-11-20T14:11:09.958524Z"}},"outputs":[{"output_type":"display_data","data":{"text/html":"<iframe\n    scrolling=\"no\"\n    width=\"100%\"\n    height=\"545px\"\n    src=\"iframe_figures/figure_74.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n"},"metadata":{}}],"execution_count":74},{"cell_type":"markdown","source":"#### Payment Analysis","metadata":{}},{"cell_type":"markdown","source":"The dataset provided does not include any information about payment methods. To analyze the most common payment methods used by customers, you would need a dataset that includes a column like PaymentMethod, TransactionType, or something similar.","metadata":{}},{"cell_type":"markdown","source":"#### Customer Behavior","metadata":{}},{"cell_type":"code","source":"customer_activity = cleaned_data.groupby('CustomerID').agg(FirstPurchase=('InvoiceDate', 'min'), LastPurchase=('InvoiceDate', 'max')).reset_index()\n\ncustomer_activity['ActiveDuration'] = (customer_activity['LastPurchase'] - customer_activity['FirstPurchase']).dt.days\n\naverage_active_duration = customer_activity['ActiveDuration'].mean()\n\nprint(f\"The average active duration for customers is {average_active_duration:.2f} days.\")\n\nfig = px.histogram(customer_activity, x='ActiveDuration', nbins=30, title='Distribution of Customer Active Durations')\nfig.update_layout(xaxis_title='Active Duration (days)', yaxis_title='Number of Customers')\nfig.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:09.962193Z","iopub.execute_input":"2024-11-20T14:11:09.962665Z","iopub.status.idle":"2024-11-20T14:11:10.062005Z","shell.execute_reply.started":"2024-11-20T14:11:09.962626Z","shell.execute_reply":"2024-11-20T14:11:10.060587Z"}},"outputs":[{"name":"stdout","text":"The average active duration for customers is 133.39 days.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/html":"<iframe\n    scrolling=\"no\"\n    width=\"100%\"\n    height=\"545px\"\n    src=\"iframe_figures/figure_75.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n"},"metadata":{}}],"execution_count":75},{"cell_type":"markdown","source":"#### Are there any customer segments based on their purchase behavior?\n\nYes there are Customer segments based on their purchase behavior and are generated in the RFM section below.","metadata":{}},{"cell_type":"code","source":"# Identify orders with returns or refunds\n\n# Check for negative quantities\nreturns_or_refunds = cleaned_data[(cleaned_data['Quantity'] < 0) | (cleaned_data['InvoiceNo'].str.startswith('C'))]\n\ntotal_orders = cleaned_data['InvoiceNo'].nunique()\n\nrefund_orders = returns_or_refunds['InvoiceNo'].nunique()\n\nrefund_percentage = (refund_orders / total_orders) * 100\n\nprint(f\"Percentage of orders with returns or refunds: {refund_percentage:.2f}%\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:10.063768Z","iopub.execute_input":"2024-11-20T14:11:10.064228Z","iopub.status.idle":"2024-11-20T14:11:10.228279Z","shell.execute_reply.started":"2024-11-20T14:11:10.064188Z","shell.execute_reply":"2024-11-20T14:11:10.226659Z"}},"outputs":[{"name":"stdout","text":"Percentage of orders with returns or refunds: 16.47%\n","output_type":"stream"}],"execution_count":76},{"cell_type":"code","source":"import plotly.express as px\n\n# Filter orders with negative Quantity (refunds/returns)\nreturns_or_refunds = cleaned_data[cleaned_data['Quantity'] < 0]\n\n# Ensure that the InvoiceDate column is of datetime type\ncleaned_data['InvoiceDate'] = pd.to_datetime(cleaned_data['InvoiceDate'])\n\n# Extract month and year for grouping (use other periods like week or day if needed)\nreturns_or_refunds['Month_Year'] = returns_or_refunds['InvoiceDate'].dt.to_period('M')\n\n# Convert 'Month_Year' to string for easier plotting\nreturns_or_refunds['Month_Year'] = returns_or_refunds['Month_Year'].astype(str)\n\n# Count the number of returns/refunds for each month\nmonthly_returns = returns_or_refunds.groupby('Month_Year').size().reset_index(name='Refund_Count')\n\n# Create a bar plot for returns/refunds\nfig = px.bar(monthly_returns, x='Month_Year', y='Refund_Count', \n             title='Returns/Refunds Count Over Time', labels={'Month_Year': 'Month/Year', 'Refund_Count': 'Number of Returns/Refunds'})\n\nfig.update_xaxes(tickmode='array', tickvals=monthly_returns['Month_Year'])\nfig.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:10.229964Z","iopub.execute_input":"2024-11-20T14:11:10.230486Z","iopub.status.idle":"2024-11-20T14:11:10.354805Z","shell.execute_reply.started":"2024-11-20T14:11:10.230445Z","shell.execute_reply":"2024-11-20T14:11:10.353301Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_84/3902327782.py:7: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n/tmp/ipykernel_84/3902327782.py:10: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n/tmp/ipykernel_84/3902327782.py:13: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/html":"<iframe\n    scrolling=\"no\"\n    width=\"100%\"\n    height=\"545px\"\n    src=\"iframe_figures/figure_77.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n"},"metadata":{}}],"execution_count":77},{"cell_type":"code","source":"returns_or_refunds = cleaned_data[cleaned_data['Quantity'] < 0]\n\ncategory_returns = returns_or_refunds.groupby('Description').size().reset_index(name='Return_Count')\n\ncategory_orders = cleaned_data.groupby('Description').size().reset_index(name='Total_Orders')\n\ncategory_data = pd.merge(category_orders, category_returns, on='Description', how='left').fillna(0)\n\ncategory_data['Return_Rate'] = category_data['Return_Count'] / category_data['Total_Orders']\n\ncategory_data_sorted = category_data.sort_values(by='Return_Rate', ascending=False)\n\nfig = px.bar(category_data_sorted, x='Description', y='Return_Rate', title='Return Rate by Product Category', labels={'Description':'Product Category','Return_Rate' : 'Return_Rate'},color='Return_Rate', color_continuous_scale='Viridis')\n\nfig.update_xaxes(tickangle=90, tickmode='array')\nfig.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:10.356748Z","iopub.execute_input":"2024-11-20T14:11:10.357321Z","iopub.status.idle":"2024-11-20T14:11:10.512703Z","shell.execute_reply.started":"2024-11-20T14:11:10.357268Z","shell.execute_reply":"2024-11-20T14:11:10.511499Z"}},"outputs":[{"output_type":"display_data","data":{"text/html":"<iframe\n    scrolling=\"no\"\n    width=\"100%\"\n    height=\"545px\"\n    src=\"iframe_figures/figure_78.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n"},"metadata":{}}],"execution_count":78},{"cell_type":"code","source":"cleaned_data['Sales'] = cleaned_data['Quantity'] * cleaned_data['UnitPrice']\n\ntotal_sales = cleaned_data['Sales'].sum()\n\n#Estimate cost assuming a 30% profit margin\nprofit_margin = 0.30\n\ncleaned_data['Cost'] = cleaned_data['Sales'] * (1 - profit_margin)\n\ntotal_cost = cleaned_data['Cost'].sum()\ntotal_profit = total_sales - total_cost\n\nprint(f\"Total Cost: ${total_cost:,.2f}\")\nprint(f\"Total Profit: ${total_profit:,.2f}\")\n\nprint()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:10.514545Z","iopub.execute_input":"2024-11-20T14:11:10.515093Z","iopub.status.idle":"2024-11-20T14:11:10.535702Z","shell.execute_reply.started":"2024-11-20T14:11:10.515038Z","shell.execute_reply":"2024-11-20T14:11:10.534377Z"}},"outputs":[{"name":"stdout","text":"Total Cost: $5,810,046.07\nTotal Profit: $2,490,019.74\n\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_84/4098414241.py:1: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n/tmp/ipykernel_84/4098414241.py:8: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n","output_type":"stream"}],"execution_count":79},{"cell_type":"code","source":"cleaned_data['Sales'] = cleaned_data['Quantity'] * cleaned_data['UnitPrice']\n\ncleaned_data['Profit'] = cleaned_data['Sales'] * profit_margin\n\nproduct_profit = cleaned_data.groupby('Description').agg(Total_Sales=('Sales', 'sum'), Total_Profit=('Profit', 'sum')).reset_index()\nproduct_profit['Profit_Margin'] = (product_profit['Total_Profit'] / product_profit['Total_Sales'])\n\ntop_products = product_profit.sort_values(by='Profit_Margin', ascending=False).head(5)\nprint(top_products)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:10.537733Z","iopub.execute_input":"2024-11-20T14:11:10.538307Z","iopub.status.idle":"2024-11-20T14:11:10.615967Z","shell.execute_reply.started":"2024-11-20T14:11:10.538253Z","shell.execute_reply":"2024-11-20T14:11:10.61432Z"}},"outputs":[{"name":"stdout","text":"                             Description  Total_Sales  Total_Profit  \\\n3895    ZINC WIRE SWEETHEART LETTER TRAY       253.24        75.972   \n1632               HEARTS WRAPPING TAPE          3.25         0.975   \n425                      BLUE EGG  SPOON       258.72        77.616   \n3478    TRADITIONAL WOODEN SKIPPING ROPE      9963.90      2989.170   \n3477  TRADITIONAL WOODEN CATCH CUP GAME       3640.50      1092.150   \n\n      Profit_Margin  \n3895            0.3  \n1632            0.3  \n425             0.3  \n3478            0.3  \n3477            0.3  \n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_84/689228639.py:1: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n/tmp/ipykernel_84/689228639.py:3: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n","output_type":"stream"}],"execution_count":80},{"cell_type":"code","source":"fig = px.bar(top_products, x='Description', y='Profit_Margin', title='Top 5 Products by Profit Margin', labels={'Description': 'Product', 'Profit_Margin': 'Profit Margin(%)'},text='Profit_Margin')\nfig.update_traces(texttemplate='%{text:.2f}%', textposition='outside')\nfig.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:10.617432Z","iopub.execute_input":"2024-11-20T14:11:10.617755Z","iopub.status.idle":"2024-11-20T14:11:10.700347Z","shell.execute_reply.started":"2024-11-20T14:11:10.617725Z","shell.execute_reply":"2024-11-20T14:11:10.698963Z"}},"outputs":[{"output_type":"display_data","data":{"text/html":"<iframe\n    scrolling=\"no\"\n    width=\"100%\"\n    height=\"545px\"\n    src=\"iframe_figures/figure_81.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n"},"metadata":{}}],"execution_count":81},{"cell_type":"markdown","source":"#### Customer Feedback Proxy Metrics Dissatisfaction (Proxy):\n* Use return/refund rates as a proxy for dissatisfaction. Products with higher return rates or more frequent refunds may indicate issues, such as poor quality or misrepresentation.\n\n#### Customer Satisfaction (Proxy):\n* High purchase quantities can indicate customer satisfaction. Customers who buy products in large quantities might be more satisfied or have strong preferences for those products.\n\n\n","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\n# Step 1: Calculate satisfaction and dissatisfaction scores\n\n# Create Sales column\ncleaned_data['Sales'] = cleaned_data['Quantity'] * cleaned_data['UnitPrice']\n\n# Satisfaction Rate (proxy: high purchase quantities, threshold = 50)\nsatisfaction_threshold = 50  # Quantity threshold for high satisfaction\nsatisfaction_data = cleaned_data[cleaned_data['Quantity'] >= satisfaction_threshold]\nproduct_satisfaction = satisfaction_data.groupby('Description').agg(\n    Total_Quantity=('Quantity', 'sum'),\n    Total_Sales=('Sales', 'sum')\n).reset_index()\nproduct_satisfaction['Avg_Satisfaction_Score'] = np.clip(\n    product_satisfaction['Total_Quantity'] / product_satisfaction['Total_Quantity'].max() * 5, 0, 5)\n\n# Dissatisfaction Rate (proxy: refund/return rates, negative quantities)\ndissatisfaction_data = cleaned_data[cleaned_data['Quantity'] < 0]\nproduct_dissatisfaction = dissatisfaction_data.groupby('Description').agg(\n    Total_Returns=('Quantity', 'sum'),\n    Total_Refunds=('Sales', 'sum')\n).reset_index()\nproduct_dissatisfaction['Avg_Dissatisfaction_Score'] = np.clip(\n    abs(product_dissatisfaction['Total_Returns']) / abs(product_dissatisfaction['Total_Returns']).max() * 5, 0, 5)\n\n# Merge satisfaction and dissatisfaction data\nproduct_feedback = pd.merge(\n    product_satisfaction[['Description', 'Avg_Satisfaction_Score']],\n    product_dissatisfaction[['Description', 'Avg_Dissatisfaction_Score']],\n    on='Description', how='outer'\n).fillna(0)  # Fill missing scores with 0\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:15:02.604595Z","iopub.execute_input":"2024-11-20T14:15:02.60512Z","iopub.status.idle":"2024-11-20T14:15:02.664141Z","shell.execute_reply.started":"2024-11-20T14:15:02.60508Z","shell.execute_reply":"2024-11-20T14:15:02.662805Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_84/1824937184.py:7: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n","output_type":"stream"}],"execution_count":93},{"cell_type":"code","source":"import plotly.express as px\n\n# Sort by highest satisfaction or dissatisfaction scores and filter top 20\ntop_feedback_products = product_feedback.nlargest(20, 'Avg_Dissatisfaction_Score')\n\n# Create stacked bar chart for satisfaction and dissatisfaction\nfig = px.bar(top_feedback_products, \n             x='Description', \n             y=['Avg_Satisfaction_Score', 'Avg_Dissatisfaction_Score'], \n             title='Satisfaction vs Dissatisfaction by Product (Top 20)',\n             labels={'value': 'Score (Out of 5)', 'variable': 'Metric', 'Description': 'Product Name'},\n             barmode='stack',  # Stacked bar chart\n             height=600,\n             color_discrete_map={'Avg_Satisfaction_Score': 'green', 'Avg_Dissatisfaction_Score': 'red'})\n\n# Update x-axis for readability\nfig.update_xaxes(tickangle=45)\nfig.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:17:27.838903Z","iopub.execute_input":"2024-11-20T14:17:27.839374Z","iopub.status.idle":"2024-11-20T14:17:27.93077Z","shell.execute_reply.started":"2024-11-20T14:17:27.839338Z","shell.execute_reply":"2024-11-20T14:17:27.929624Z"}},"outputs":[{"output_type":"display_data","data":{"text/html":"<iframe\n    scrolling=\"no\"\n    width=\"100%\"\n    height=\"620\"\n    src=\"iframe_figures/figure_98.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n"},"metadata":{}}],"execution_count":98},{"cell_type":"markdown","source":"## RFM Calculation","metadata":{}},{"cell_type":"markdown","source":"#### To calculate RFM (Recency, Frequency, and Monetary) metrics, follow these steps:\n\n#### Steps to Calculate RFM:\n#### 1. Prepare the Dataset\nEnsure your dataset has the following columns:\n\n##### CustomerID: Unique identifier for each customer.\n##### InvoiceDate: Date of each transaction.\n##### InvoiceNo: Unique identifier for each order.\n##### Quantity: Number of items purchased.\n##### UnitPrice: Price per unit of the product.\n#### 2. Calculate RFM Metrics\n##### Recency (R): Days since the last purchase.\n##### Frequency (F): Total number of orders per customer.\n##### Monetary (M): Total monetary value of purchases per customer.","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\n# Add a total price column\ncleaned_data['TotalPrice'] = cleaned_data['Quantity'] * cleaned_data['UnitPrice']\n\n# Define a reference date for recency calculation (e.g., last transaction date in the dataset)\nreference_date = cleaned_data['InvoiceDate'].max()\n\n# Group by CustomerID to calculate RFM\nrfm = cleaned_data.groupby('CustomerID').agg(\n    Recency=('InvoiceDate', lambda x: (reference_date - x.max()).days),\n    Frequency=('InvoiceNo', 'nunique'),\n    Monetary=('TotalPrice', 'sum')\n).reset_index()\n\n# Display the RFM metrics\nprint(rfm.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:10.702162Z","iopub.execute_input":"2024-11-20T14:11:10.702551Z","iopub.status.idle":"2024-11-20T14:11:11.187732Z","shell.execute_reply.started":"2024-11-20T14:11:10.702517Z","shell.execute_reply":"2024-11-20T14:11:11.186391Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_84/996502868.py:4: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n","output_type":"stream"},{"name":"stdout","text":"   CustomerID  Recency  Frequency  Monetary\n0     12346.0      325          2      0.00\n1     12347.0        1          7   4310.00\n2     12348.0       74          4   1797.24\n3     12349.0       18          1   1757.55\n4     12350.0      309          1    334.40\n","output_type":"stream"}],"execution_count":82},{"cell_type":"markdown","source":"### Explanation of the Code\n#### Recency:\n(reference_date - x.max()).days: Calculates the number of days since the last purchase for each customer.\n#### Frequency:\n'nunique' on InvoiceNo counts the number of unique orders per customer.\n#### Monetary:\nThe sum of the TotalPrice column calculates the total revenue generated by each customer.","metadata":{}},{"cell_type":"code","source":"import plotly.express as px\n\n# Recency Distribution\nfig_recency = px.histogram(rfm, x='Recency', nbins=20, title='Distribution of Recency (R)')\nfig_recency.update_xaxes(title='Days Since Last Purchase')\nfig_recency.update_yaxes(title='Count of Customers')\nfig_recency.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:11.189256Z","iopub.execute_input":"2024-11-20T14:11:11.189795Z","iopub.status.idle":"2024-11-20T14:11:11.286082Z","shell.execute_reply.started":"2024-11-20T14:11:11.189738Z","shell.execute_reply":"2024-11-20T14:11:11.284337Z"}},"outputs":[{"output_type":"display_data","data":{"text/html":"<iframe\n    scrolling=\"no\"\n    width=\"100%\"\n    height=\"545px\"\n    src=\"iframe_figures/figure_83.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n"},"metadata":{}}],"execution_count":83},{"cell_type":"code","source":"\n# Frequency Distribution\nfig_frequency = px.histogram(rfm, x='Frequency', nbins=20, title='Distribution of Frequency (F)')\nfig_frequency.update_xaxes(title='Number of Orders')\nfig_frequency.update_yaxes(title='Count of Customers')\nfig_frequency.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:11.288721Z","iopub.execute_input":"2024-11-20T14:11:11.289228Z","iopub.status.idle":"2024-11-20T14:11:11.38043Z","shell.execute_reply.started":"2024-11-20T14:11:11.289189Z","shell.execute_reply":"2024-11-20T14:11:11.379007Z"}},"outputs":[{"output_type":"display_data","data":{"text/html":"<iframe\n    scrolling=\"no\"\n    width=\"100%\"\n    height=\"545px\"\n    src=\"iframe_figures/figure_84.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n"},"metadata":{}}],"execution_count":84},{"cell_type":"code","source":"# Monetary Distribution\nfig_monetary = px.histogram(rfm, x='Monetary', nbins=20, title='Distribution of Monetary Value (M)')\nfig_monetary.update_xaxes(title='Total Monetary Value ($)')\nfig_monetary.update_yaxes(title='Count of Customers')\nfig_monetary.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:11.3823Z","iopub.execute_input":"2024-11-20T14:11:11.382749Z","iopub.status.idle":"2024-11-20T14:11:11.492785Z","shell.execute_reply.started":"2024-11-20T14:11:11.382711Z","shell.execute_reply":"2024-11-20T14:11:11.49093Z"}},"outputs":[{"output_type":"display_data","data":{"text/html":"<iframe\n    scrolling=\"no\"\n    width=\"100%\"\n    height=\"545px\"\n    src=\"iframe_figures/figure_85.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n"},"metadata":{}}],"execution_count":85},{"cell_type":"markdown","source":"## RFM Segmentation","metadata":{}},{"cell_type":"markdown","source":"#### Step 1: Assign RFM Scores\n##### We will divide the Recency, Frequency, and Monetary metrics into quartiles (1–4):\n\n- Recency: Lower scores (closer to 1) indicate recent purchases.\n- Frequency: Higher scores (closer to 4) indicate frequent purchases.\n- Monetary: Higher scores (closer to 4) indicate higher spending.","metadata":{}},{"cell_type":"code","source":"def assign_rfm_scores_with_cut(data, column, ascending=True):\n    bins = pd.cut(data[column], bins=4, labels=[4, 3, 2, 1] if ascending else [1, 2, 3, 4])\n    return bins\n\n# Assign scores\nrfm['R_Score'] = assign_rfm_scores_with_cut(rfm, 'Recency', ascending=False)\nrfm['F_Score'] = assign_rfm_scores_with_cut(rfm, 'Frequency', ascending=True)\nrfm['M_Score'] = assign_rfm_scores_with_cut(rfm, 'Monetary', ascending=True)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:11.494494Z","iopub.execute_input":"2024-11-20T14:11:11.495035Z","iopub.status.idle":"2024-11-20T14:11:11.513364Z","shell.execute_reply.started":"2024-11-20T14:11:11.494952Z","shell.execute_reply":"2024-11-20T14:11:11.511903Z"}},"outputs":[],"execution_count":86},{"cell_type":"code","source":"# Combine RFM scores into a single score\nrfm['RFM_Score'] = rfm['R_Score'].astype(str) + rfm['F_Score'].astype(str) + rfm['M_Score'].astype(str)\n\n# Display the first few rows\nprint(rfm[['CustomerID', 'R_Score', 'F_Score', 'M_Score', 'RFM_Score']].head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:11.515385Z","iopub.execute_input":"2024-11-20T14:11:11.515723Z","iopub.status.idle":"2024-11-20T14:11:11.550001Z","shell.execute_reply.started":"2024-11-20T14:11:11.515691Z","shell.execute_reply":"2024-11-20T14:11:11.548535Z"}},"outputs":[{"name":"stdout","text":"   CustomerID R_Score F_Score M_Score RFM_Score\n0     12346.0       4       4       4       444\n1     12347.0       1       4       4       144\n2     12348.0       1       4       4       144\n3     12349.0       1       4       4       144\n4     12350.0       4       4       4       444\n","output_type":"stream"}],"execution_count":87},{"cell_type":"markdown","source":"#### Step 2: Analyze RFM Segments\n##### After calculating the scores, you can group customers into meaningful segments:\n\n- Example Segments\n- Champions (RFM Score: 444): Recent, frequent, and high spenders.\n- Loyal Customers: High frequency and monetary, but not necessarily recent.\n- At Risk: Used to spend often but haven’t made recent purchases.\n- Lost Customers (RFM Score: 111): Old purchases, infrequent, and low spenders.","metadata":{}},{"cell_type":"code","source":"# Define RFM segments based on RFM scores\ndef segment_rfm(score):\n    if score == '444':\n        return 'Champion'\n    elif score.startswith('44'):\n        return 'Loyal'\n    elif score.endswith('44'):\n        return 'Big Spender'\n    elif score.startswith('11'):\n        return 'Lost'\n    else:\n        return 'At Risk'\n\nrfm['Segment'] = rfm['RFM_Score'].apply(segment_rfm)\n\n# Display segment counts\nprint(rfm['Segment'].value_counts())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:11.552384Z","iopub.execute_input":"2024-11-20T14:11:11.552956Z","iopub.status.idle":"2024-11-20T14:11:11.569957Z","shell.execute_reply.started":"2024-11-20T14:11:11.552904Z","shell.execute_reply":"2024-11-20T14:11:11.567508Z"}},"outputs":[{"name":"stdout","text":"Segment\nBig Spender    3998\nChampion        356\nAt Risk          16\nLost              2\nName: count, dtype: int64\n","output_type":"stream"}],"execution_count":88},{"cell_type":"markdown","source":"### Visualizations","metadata":{}},{"cell_type":"code","source":"import plotly.express as px\n\nfig = px.pie(rfm, names='Segment', title='RFM Segment Distribution', hole=0.4)\nfig.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:11.571662Z","iopub.execute_input":"2024-11-20T14:11:11.572552Z","iopub.status.idle":"2024-11-20T14:11:11.665854Z","shell.execute_reply.started":"2024-11-20T14:11:11.572475Z","shell.execute_reply":"2024-11-20T14:11:11.663931Z"}},"outputs":[{"output_type":"display_data","data":{"text/html":"<iframe\n    scrolling=\"no\"\n    width=\"100%\"\n    height=\"545px\"\n    src=\"iframe_figures/figure_89.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n"},"metadata":{}}],"execution_count":89},{"cell_type":"code","source":"import plotly.express as px\n\n# Count customers in each segment\nsegment_count = rfm['Segment'].value_counts().reset_index()\nsegment_count.columns = ['Segment', 'Customer Count']\n\n# Plot the segments\nfig = px.bar(segment_count, x='Segment', y='Customer Count', color='Segment', \n             title='Customer Segmentation Based on RFM Scores')\nfig.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:11.667717Z","iopub.execute_input":"2024-11-20T14:11:11.66824Z","iopub.status.idle":"2024-11-20T14:11:11.798108Z","shell.execute_reply.started":"2024-11-20T14:11:11.668199Z","shell.execute_reply":"2024-11-20T14:11:11.796138Z"}},"outputs":[{"output_type":"display_data","data":{"text/html":"<iframe\n    scrolling=\"no\"\n    width=\"100%\"\n    height=\"545px\"\n    src=\"iframe_figures/figure_90.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n"},"metadata":{}}],"execution_count":90},{"cell_type":"code","source":"# Calculate mean R, F, M scores by segment\nsegment_metrics = rfm.groupby('Segment')[['Recency', 'Frequency', 'Monetary']].mean().reset_index()\n\n# Plot the metrics\nfig = px.bar(segment_metrics, x='Segment', y=['Recency', 'Frequency', 'Monetary'], \n             title='Average RFM Metrics by Segment', barmode='group')\nfig.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:11.80044Z","iopub.execute_input":"2024-11-20T14:11:11.800992Z","iopub.status.idle":"2024-11-20T14:11:11.925533Z","shell.execute_reply.started":"2024-11-20T14:11:11.800936Z","shell.execute_reply":"2024-11-20T14:11:11.923576Z"}},"outputs":[{"output_type":"display_data","data":{"text/html":"<iframe\n    scrolling=\"no\"\n    width=\"100%\"\n    height=\"545px\"\n    src=\"iframe_figures/figure_91.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n"},"metadata":{}}],"execution_count":91},{"cell_type":"code","source":"rfm_scores = rfm.groupby(['R_Score', 'F_Score']).size().reset_index(name='Count')\n\nfig = px.density_heatmap(rfm_scores, x='R_Score', y='F_Score', z='Count', \n                         title='Heatmap of RFM Scores', color_continuous_scale='Viridis')\nfig.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:11:11.927084Z","iopub.execute_input":"2024-11-20T14:11:11.928104Z","iopub.status.idle":"2024-11-20T14:11:12.045763Z","shell.execute_reply.started":"2024-11-20T14:11:11.928044Z","shell.execute_reply":"2024-11-20T14:11:12.044446Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_84/3609140261.py:1: FutureWarning:\n\nThe default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/html":"<iframe\n    scrolling=\"no\"\n    width=\"100%\"\n    height=\"545px\"\n    src=\"iframe_figures/figure_92.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n"},"metadata":{}}],"execution_count":92}]}